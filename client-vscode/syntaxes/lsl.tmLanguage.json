{
	"scopeName": "source.lsl",
	"patterns": [
		{
			"name": "comment.block.lsl",
			"begin": "/\\*",
			"beginCaptures": { "0": { "name": "punctuation.definition.comment.begin.lsl" } },
			"end": "\\*/",
			"endCaptures": { "0": { "name": "punctuation.definition.comment.end.lsl" } }
		},
		{
			"name": "comment.line.double-slash.lsl",
			"begin": "//",
			"beginCaptures": { "0": { "name": "punctuation.definition.comment.lsl" } },
			"end": "$"
		},
		{
			"name": "meta.preprocessor.lsl",
			"begin": "^\\s*(#)\\s*(define|include|ifdef|ifndef|endif|else|if|elif|error|pragma)",
			"beginCaptures": {
				"1": { "name": "keyword.control.directive.lsl" },
				"2": { "name": "keyword.control.directive.lsl" }
			},
			"end": "(?<!\\\\)$",
			"patterns": [
				{
					"name": "meta.preprocessor.define.lsl",
					"begin": "\\G\\s*([A-Za-z_][A-Za-z0-9_]*)\\s*(?:\\(\\s*[^)]*\\))?",
					"beginCaptures": { "1": { "name": "entity.name.constant.macro.lsl" } },
					"end": "$",
					"patterns": [
						{ "match": "\\\\(?=\\n)", "name": "punctuation.separator.continuation.lsl" },
						{ "match": "(?<=\\S)##(?=\\S)", "name": "punctuation.separator.token-paste.lsl" },
						{ "match": "[!&|?:=<>+\\-*/%]+", "name": "keyword.operator.macro.define.lsl" },
						{ "match": "[()]", "name": "punctuation.parenthesis.macro.define.lsl" },
						{ "begin": "\"", "end": "\"", "name": "string.quoted.double.macro.lsl", "patterns": [ { "match": "\\\\.", "name": "constant.character.escape.lsl" } ] },
						{ "match": "\\b(?:\\d*\\.\\d+|\\d+)(?:[eE][+-]?\\d+)?\\b", "name": "constant.numeric.macro.lsl" },
						{ "match": "\\b__LINE__\\b", "name": "constant.language.macro.line.lsl" },
						{ "match": "\\b__FILE__\\b", "name": "constant.language.macro.file.lsl" },
						{ "match": "\\b__VA_ARGS__\\b", "name": "constant.language.macro.varargs.lsl" },
						{ "match": "\\b__VA_OPT__\\b", "name": "support.function.macro.vaopt.lsl" },

						{ "match": "\\b(integer|float|string|key|vector|rotation|quaternion|list|void)\\b", "name": "support.type.primitive.macro.lsl" },
						{ "match": "\\b(?!integer\\b|float\\b|string\\b|key\\b|vector\\b|rotation\\b|quaternion\\b|list\\b|void\\b)([A-Za-z_][A-Za-z0-9_]*)\\s*(?=\\()", "name": "support.function.macro.lsl" },
						{ "match": "\\b([A-Z_][A-Z0-9_]*)\\b(?!\\s*\\()", "name": "constant.language.macro.lsl" },
						{ "match": "\\S+", "name": "meta.definition.macro.body.lsl" }
					]
				},
				{
					"name": "meta.preprocessor.if.lsl",
					"begin": "\\G\\s*(?=(?:defined|[!()A-Za-z_0-9]|\"|\\d))",
					"end": "$",
					"patterns": [
						{ "match": "\\bdefined\\b", "name": "keyword.other.defined.lsl" },
						{
							"begin": "\"",
							"beginCaptures": { "0": { "name": "punctuation.definition.string.begin.lsl" } },
							"end": "(?<!\\\\)(?:\\\\\\\\)*\"",
							"endCaptures": { "0": { "name": "punctuation.definition.string.end.lsl" } },
							"name": "string.quoted.double.macro.cond.lsl",
							"patterns": [ { "match": "\\\\.", "name": "constant.character.escape.lsl" } ]
						},
						{ "match": "\\b__LINE__\\b", "name": "constant.language.macro.line.lsl" },
						{ "match": "\\b__FILE__\\b", "name": "constant.language.macro.file.lsl" },
						{ "match": "\\b__VA_ARGS__\\b", "name": "constant.language.macro.varargs.lsl" },
						{ "match": "\\b__VA_OPT__\\b", "name": "support.function.macro.vaopt.lsl" },
						{ "match": "[!&|?:=<>+\\-*/%]+", "name": "keyword.operator.macro.cond.lsl" },
						{ "match": "\\b([A-Z_][A-Z0-9_]*)\\b", "name": "constant.language.macro.cond.lsl" },
						{ "match": "\\b([A-Za-z_][A-Za-z0-9_]*)\\b", "name": "variable.other.macro.cond.lsl" },
						{ "match": "[()]", "name": "punctuation.parenthesis.cond.lsl" },
						{ "match": "[\\[\\]]", "name": "punctuation.section.brackets.macro.define.lsl" },
						{
							"name": "comment.line.double-slash.lsl",
							"begin": "//",
							"beginCaptures": { "0": { "name": "punctuation.definition.comment.lsl" } },
							"end": "$"
						}
					]
				},
				{
					"name": "meta.preprocessor.include.lsl",
					"begin": "\\G\\s*",
					"end": "$",
					"patterns": [
						{
							"begin": "\"",
							"beginCaptures": { "0": { "name": "punctuation.definition.string.begin.lsl" } },
							"end": "(?<!\\\\)(?:\\\\\\\\)*\"",
							"endCaptures": { "0": { "name": "punctuation.definition.string.end.lsl" } },
							"name": "string.quoted.double.include.lsl"
						},
						{ "begin": "<", "end": ">", "name": "string.quoted.other.ltgt.include.lsl" },
						{ "match": "\\S+", "name": "meta.include.target.lsl" }
					]
				}
			]
		},
		{
			"name": "string.quoted.double.lsl",
			"begin": "\"",
			"end": "\"",
			"beginCaptures": {},
			"endCaptures": {},
			"patterns": [
				{ "match": "\\\\." }
			]
		},
		{
			"name": "constant.numeric.lsl",
			"match": "\\b(?:\\d*\\.\\d+|\\d+)(?:[eE][+-]?\\d+)?\\b"
		},
		{
			"name": "support.type.primitive.lsl",
			"match": "\\b(integer|float|string|key|vector|rotation|quaternion|list|void)\\b"
		},
		{
			"name": "keyword.control.lsl",
			"match": "\\b(if|else|for|while|do|return|state|default|jump|label|event)\\b"
		},
		{
			"name": "support.function.lsl",
			"match": "\\b(?!integer\\b|float\\b|string\\b|key\\b|vector\\b|rotation\\b|quaternion\\b|list\\b|void\\b)([A-Za-z_][A-Za-z0-9_]*)\\s*(?=\\()",
			"captures": { "1": { "name": "support.function.lsl" } }
		},
		{
			"name": "constant.language.lsl",
			"match": "\\b([A-Z_][A-Z0-9_]*)\\b(?!\\s*\\()"
		}
	],
	"repository": {},
	"injectionSelector": "L:source.lsl"
}
